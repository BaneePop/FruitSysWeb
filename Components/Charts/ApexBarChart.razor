@rendermode @(new InteractiveServerRenderMode())
@using Microsoft.AspNetCore.Components.Web
@using ApexCharts
@using FruitSysWeb.Components.Charts

<style>
    .spin {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>


<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h6 class="mb-0">
            <i class="@Icon"></i>
            @Title
        </h6>
        @if (ShowRefreshButton)
        {
            <button class="btn btn-sm btn-outline-primary" @onclick="RefreshChart" disabled="@IsLoading">
                <i class="bi bi-arrow-clockwise @(IsLoading ? "spin" : "")"></i>
            </button>
        }
    </div>
    <div class="card-body">
        @if (IsLoading)
        {
            <div class="text-center p-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Učitavam podatke...</p>
            </div>
        }
        else if (HasError)
        {
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle"></i>
                Greška pri učitavanju podataka.
                <button class="btn btn-sm btn-outline-danger ms-2" @onclick="RefreshChart">
                    Pokušaj ponovo
                </button>
            </div>
        }
        else if (Data == null || !Data.Any())
        {
            <div class="text-center p-4 text-muted">
                <i class="bi bi-bar-chart" style="font-size: 2rem;"></i>
                <p class="mt-2">Nema podataka za prikaz</p>
            </div>
        }
        else
        {
            <ApexChart TItem="ChartDataPoint" 
                       @key="@($"bar-chart-{Title}-{Data?.Count ?? 0}")"
                       Title="@ChartTitle"
                       Height="@Height"
                       Options="@ChartOptions">
                <ApexPointSeries TItem="ChartDataPoint"
                                 Items="@Data"
                                 Name="@SeriesName"
                                 SeriesType="SeriesType.Bar"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e => e.Value)" />
            </ApexChart>
            
            @if (ShowSummary && Data.Any())
            {
                <div class="mt-3 pt-3 border-top">
                    <small class="text-muted">
                        <strong>Ukupno:</strong> @Data.Sum(x => x.Value).ToString("N2") @Unit
                        | <strong>Prosek:</strong> @Data.Average(x => x.Value).ToString("N2") @Unit
                    </small>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Bar Chart";
    [Parameter] public string ChartTitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "bi bi-bar-chart";
    [Parameter] public string SeriesName { get; set; } = "Vrednost";
    [Parameter] public string Unit { get; set; } = "";
    [Parameter] public int Height { get; set; } = 300;
    [Parameter] public bool ShowRefreshButton { get; set; } = true;
    [Parameter] public bool ShowSummary { get; set; } = true;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool HasError { get; set; } = false;
    [Parameter] public List<ChartDataPoint>? Data { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    [Parameter] public string Color { get; set; } = "#28a745"; // Default green

    private ApexChartOptions<ChartDataPoint> ChartOptions => new()
    {
        Chart = new Chart
        {
            Type = ChartType.Bar,
            Height = Height,
            Toolbar = new Toolbar { Show = false }
        },
        Colors = new List<string> { Color },
        PlotOptions = new PlotOptions
        {
            Bar = new PlotOptionsBar
            {
                Horizontal = false,
                ColumnWidth = "60%"
            }
        },
        DataLabels = new DataLabels
        {
            Enabled = false
        },
        Stroke = new Stroke
        {
            Show = true,
            Width = 2,
            Colors = new List<string> { "transparent" }
        },
        Xaxis = new XAxis
        {
            Categories = Data?.Select(x => x.Label).ToList() ?? new List<string>()
        },
        Yaxis = new List<YAxis>
        {
            new YAxis
            {
                Title = new AxisTitle { Text = Unit }
            }
        },
        Fill = new Fill
        {
            Opacity = 0.8
        },
        Tooltip = new Tooltip
        {
            Y = new TooltipY
            {
                Formatter = $"function(val) {{ return val.toLocaleString() + ' {Unit}' }}"
            }
        }
    };

    private async Task RefreshChart()
    {
        if (OnRefresh.HasDelegate)
        {
            await OnRefresh.InvokeAsync();
        }
    }
}

