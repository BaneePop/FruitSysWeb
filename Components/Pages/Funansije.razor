@page "/finansije"
@using FruitSysWeb.Services.Interfaces
@using FruitSysWeb.Services.Models.Requests
@using FruitSysWeb.Components
@* @using FruitSysWeb.Components.Shared.Charts *@
@using FruitSysWeb.Components.Shared.Tables
@using FruitSysWeb.Components.Shared.Layout
@using FruitSysWeb.Components.Shared.Filters

@* 
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util *@

@inject IFinansijeService FinansijeService
@inject IExportService ExportService
@inject IJSRuntime JSRuntime

<style>
    .financial-section {
        margin-bottom: 2rem;
    }
    
    .section-title {
        color: #0f5132;
        border-bottom: 2px solid #198754;
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
        font-weight: 600;
    }
</style>

<!-- Header -->
<div class="bg-primary text-white py-3 mb-4">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="h3 mb-0">
                    <i class="bi bi-cash-coin me-2"></i>
                    Finansijski Pregled
                </h1>
            </div>
            <div class="col-md-6 text-end">
                <span class="badge bg-light text-dark fs-6">
                    <i class="bi bi-database me-1"></i>@(podaci?.Count ?? 0) stavki
                </span>
                <span class="badge @saldoBadgeClass ms-2 fs-6">
                    Saldo: @UkupnoSaldo.ToString("N2")
                </span>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <!-- Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-funnel me-2"></i>Filteri pretrage
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <DateFilter Label="Od datuma" 
                                    SelectedDate="@filterRequest.OdDatum" 
                                    SelectedDateChanged="@(value => { filterRequest.OdDatum = value; })"
                                    Size="2" />

                        <DateFilter Label="Do datuma" 
                                    SelectedDate="@filterRequest.DoDatum" 
                                    SelectedDateChanged="@(value => { filterRequest.DoDatum = value; })"
                                    Size="2" />

                        <KomitentFilter Label="Komitent"
                                        SelectedKomitentId="@filterRequest.KomitentId" 
                                        SelectedKomitentIdChanged="@(value => { filterRequest.KomitentId = value; })"
                                        Size="2" />

                        <ArtikalFilter Label="Artikal"
                                       SelectedArtikalId="@filterRequest.ArtikalId" 
                                       SelectedArtikalIdChanged="@(value => { filterRequest.ArtikalId = value; })"
                                       Size="2" />

                        <div class="col-md-2 mb-3">
                            <label class="form-label fw-bold">Tip komitenta:</label>
                            <select class="form-select" @bind="filterRequest.KomitentTip">
                                <option value="">Svi tipovi</option>
                                <option value="Kupac">Kupac</option>
                                <option value="Dobavljac">Dobavljač</option>
                                <option value="Proizvodjac">Proizvođač</option>
                                <option value="Otkupljivac">Otkupljivač</option>
                            </select>
                        </div>

                        <div class="col-md-2 mb-3">
                            <label class="form-label fw-bold">Tip artikla:</label>
                            <select class="form-select" @bind="filterRequest.ArtikalTip">
                                <option value="">Svi tipovi</option>
                                <option value="1">Ambalaza</option>
                                <option value="2">Repromaterijal</option>
                                <option value="3">Gotov Proizvod</option>
                                <option value="4">Oprema</option>
                            </select>
                        </div>

                        <div class="col-md-12 mb-3 d-flex align-items-end">
                            <div class="d-grid gap-2 w-100">
                                <button class="btn btn-primary" @onclick="UcitajPodatke">
                                    <i class="bi bi-search me-2"></i>Primeni filtere
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetujFiltere">
                                    <i class="bi bi-arrow-clockwise me-2"></i>Resetuj
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Export Buttons -->
    <ExportButtons HasData="@(podaci?.Count > 0)"
                   OnExportExcel="ExportToExcel"
                   OnExportPdf="ExportToPdf" />

    <!-- Charts Section -->
    <div class="row mb-4 financial-section">
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5 class="section-title">
                    <i class="bi bi-currency-exchange me-2"></i>Top Kupci
                </h5>
                @* <BarChart Config="@kupciChartConfig" Height="250" /> *@
            </div>
        </div>
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5 class="section-title">
                    <i class="bi bi-truck me-2"></i>Top Dobavljači
                </h5>
                @* <BarChart Config="@dobavljaciChartConfig" Height="250" /> *@
            </div>
        </div>
    </div>

    <!-- Results Section -->
    @if (podaci == null)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    <strong>Učitavanje podataka</strong> - Molimo sačekajte...
                </div>
            </div>
        </div>
    }
    else if (!podaci.Any())
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Nema podataka</strong> - Nema pronađenih podataka za izabrane filtere.
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row financial-section">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-list-check me-2"></i>
                            Finansijski podaci
                            <span class="badge bg-primary ms-2">@podaci.Count stavki</span>
                        </h5>
                    </div>
                    <div class="card-body p-0">
@*                         <DataTable Data="@podaci.Cast<object>().ToList()" *@
                                   Columns="@tableColumns"
                                   TotalValue="@podaci.Sum(x => x.Saldo)"
                                   ShowFooter="true" />
                    </div>
                    <div class="card-footer bg-light">
                        Poslednje ažuriranje: @DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss") |
                        Prikaz: <strong>@podaci.Count stavki</strong> |
                        Ukupno saldo: <strong class="@GetSaldoClass(UkupnoSaldo)">@UkupnoSaldo.ToString("N2")</strong>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<FinansijeModel> podaci = new List<FinansijeModel>();
    private FilterRequest filterRequest = new FilterRequest();
    private decimal ukupnoSaldo = 0;

    // Chart configurations
   @*  private BarConfig kupciChartConfig;
    private BarConfig dobavljaciChartConfig; *@

    // Table columns
    private List<string> tableColumns = new List<string> 
    { 
        "Datum", "Komitent", "Dokument", "Artikal", "Količina", "Potražuje", "Duguje", "Saldo" 
    };

    private decimal UkupnoSaldo => ukupnoSaldo;
    private string saldoBadgeClass => UkupnoSaldo > 0 ? "bg-success" : UkupnoSaldo < 0 ? "bg-danger" : "bg-secondary";

    protected override async Task OnInitializedAsync()
    {
        var pocetakMeseca = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        filterRequest.OdDatum = pocetakMeseca;
        filterRequest.DoDatum = DateTime.Now;
        
        await UcitajPodatke();
        await KreirajChartove();
    }

    private async Task UcitajPodatke()
    {
        try
        {
            podaci = await FinansijeService.UcitajFinansijskiIzvestaj(filterRequest);
            ukupnoSaldo = await FinansijeService.UcitajUkupnoSaldo(filterRequest);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Greška pri učitavanju podataka: {ex.Message}");
            podaci = new List<FinansijeModel>();
            ukupnoSaldo = 0;
        }
    }

    private async Task KreirajChartove()
    {
        try
        {
            var topKupci = await FinansijeService.UcitajTopKupce(filterRequest);
            var topDobavljaci = await FinansijeService.UcitajTopDobavljace(filterRequest);
@* 
            kupciChartConfig = ChartHelper.CreateBarChart(
                topKupci.Keys.ToArray(),
                topKupci.Values.ToArray(),
                "Saldo (RSD)",
                "rgba(40, 167, 69, 0.8)"
            ); *@

           @*  dobavljaciChartConfig = ChartHelper.CreateBarChart(
                topDobavljaci.Keys.ToArray(),
                topDobavljaci.Values.ToArray(),
                "Saldo (RSD)", 
                "rgba(220, 53, 69, 0.8)"
            ); *@
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Greška pri kreiranju chartova: {ex.Message}");
        }
    }

    private string GetSaldoClass(decimal saldo)
    {
        return saldo > 0 ? "positive-saldo" : saldo < 0 ? "negative-saldo" : "neutral-saldo";
    }

    private async Task ResetujFiltere()
    {
        var pocetakMeseca = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        filterRequest = new FilterRequest
        {
            OdDatum = pocetakMeseca,
            DoDatum = DateTime.Now
        };
        
        await UcitajPodatke();
        await KreirajChartove();
    }

    private async Task ExportToExcel()
    {
        try
        {
            var excelData = ExportService.ExportToExcel(podaci);
            var fileName = $"finansije_export_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";
            await DownloadFile(excelData, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Greška pri exportu u Excel: {ex.Message}");
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var pdfData = ExportService.ExportToPdf(podaci);
            var fileName = $"finansije_export_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            await DownloadFile(pdfData, fileName, "application/pdf");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Greška pri exportu u PDF: {ex.Message}");
        }
    }

    private async Task DownloadFile(byte[] data, string fileName, string mimeType)
    {
        await JSRuntime.InvokeVoidAsync("downloadFile", Convert.ToBase64String(data), fileName, mimeType);
    }
}