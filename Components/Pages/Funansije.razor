@page "/finansije"
@using Microsoft.AspNetCore.Components.Web
@using ApexCharts
@using FruitSysWeb.Components.Charts
@using FruitSysWeb.Services.Interfaces
@using FruitSysWeb.Services.Models.Requests
@using FruitSysWeb.Models
@inject IFinansijeService FinansijeService
@inject IExportService ExportService
@inject IKomitentService KomitentService
@inject IArtikalService ArtikalService
@inject IJSRuntime JSRuntime
<!-- Isti CSS stilovi -->

<!-- Header sa saldo na vrhu -->
<div class="bg-primary text-white py-3 mb-4">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="h3 mb-0">
                    <i class="bi bi-cash-coin me-2"></i>
                    Finansijski Pregled
                </h1>
            </div>
            <div class="col-md-6 text-end">
                <span class="badge bg-light text-dark fs-6">
                    <i class="bi bi-database me-1"></i>@(podaci?.Count ?? 0) stavki
                </span>
                <!-- SALDO NA VRHU -->
                <span class="badge @saldoBadgeClass ms-2 fs-6">
                    Saldo: @UkupnoSaldo.ToString("N2") RSD
                </span>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <!-- AŽURIRANI Filter Section - uklonjen min/max saldo, dodani potrebni filteri -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-funnel me-2"></i>Filteri pretrage
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- POSTOJEĆI filteri datuma -->
                        <div class="col-md-2 mb-3">
                            <label class="form-label fw-bold">Od datuma:</label>
                            <input type="date" class="form-control" value="@OdDatumValue" @onchange="OnOdDatumChanged" />
                        </div>

                        <div class="col-md-2 mb-3">
                            <label class="form-label fw-bold">Do datuma:</label>
                            <input type="date" class="form-control" value="@DoDatumValue" @onchange="OnDoDatumChanged" />
                        </div>

                        <!-- DODATO: Komitent filter (padajući meni) -->
                        <div class="col-md-2 mb-3">
                            <label class="form-label fw-bold">Komitent:</label>
                            <select class="form-select" @bind="filterRequest.KomitentId">
                                <option value="">Svi komitenti</option>
                                @if (komitentiLista != null)
                                {
                                    @foreach (var komitent in komitentiLista)
                                    {
                                        <option value="@komitent.Id">@komitent.Naziv</option>
                                    }
                                }
                            </select>
                        </div>

                        <!-- AŽURIRANI Tip komitenta filter sa reaktivnim filtriranjem -->
                        <div class="col-md-2 mb-3">
                            <label class="form-label fw-bold">Tip komitenta:</label>
                            <select class="form-select" value="@filterRequest.KomitentTip" @onchange="OnKomitentTipChanged">
                                <option value="">Svi tipovi</option>
                                <option value="kupac">Kupac</option>
                                <option value="dobavljac">Dobavljač</option>
                                <option value="proizvodjac">Proizvođač</option>
                                <option value="otkupljivac">Otkupljivač</option>
                            </select>
                        </div>

                        <!-- DODATO: Artikal filter (padajući meni) -->
                        <div class="col-md-2 mb-3">
                            <label class="form-label fw-bold">Artikal:</label>
                            <select class="form-select" @bind="filterRequest.ArtikalId">
                                <option value="">Svi artikli</option>
                                @if (artikliLista != null)
                                {
                                    @foreach (var artikal in artikliLista)
                                    {
                                        <option value="@artikal.Id">@artikal.Naziv</option>
                                    }
                                }
                            </select>
                        </div>

                        <!-- AŽURIRANI Tip artikla filter sa reaktivnim filtriranjem -->
                        <div class="col-md-2 mb-3">
                            <label class="form-label fw-bold">Tip artikla:</label>
                            <select class="form-select" value="@filterRequest.Tip" @onchange="OnArtikalTipChanged"> 
                                <option value="">Svi tipovi</option>
                                <option value="1">Sirovina</option>
                                <option value="2">Ambalaza</option>
                                <option value="3">Potrošni materijal</option>
                                <option value="4">Gotova roba</option>
                                <option value="5">Oprema</option>
                                <option value="7">Klase</option>
                            </select>
                        </div>

                        <!-- UKLONJENI: Min saldo i Max saldo filteri prema dokumentu -->

                        <div class="col-md-12 mb-3">
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" @onclick="UcitajPodatke">
                                    <i class="bi bi-search me-2"></i>Primeni filtere
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ResetujFiltere">
                                    <i class="bi bi-arrow-clockwise me-2"></i>Resetuj
                                </button>
                                <button class="btn btn-success" @onclick="ExportToExcel" disabled="@(podaci?.Count == 0)">
                                    <i class="bi bi-file-earmark-excel me-2"></i>Excel
                                </button>
                                <button class="btn btn-danger" @onclick="ExportToPdf" disabled="@(podaci?.Count == 0)">
                                    <i class="bi bi-file-earmark-pdf me-2"></i>PDF
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    @if (filterRequest.ImaAktivneFiltre())
                    {
                        <div class="row mt-2">
                            <div class="col-12">
                                <div class="alert alert-info small">
                                    <strong>Aktivni filteri:</strong> @filterRequest.GetAktivneFiltereOpis()
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- AŽURIRANE Statistics Cards -->
    <div class="row mb-4 financial-section">
        <div class="col-md-3">
            <div class="dashboard-card">
                <h6 class="text-muted">Ukupno Potražuje</h6>
                <h4 class="positive-saldo">@UkupnoPotrazuje.ToString("N2") RSD</h4>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card">
                <h6 class="text-muted">Ukupno Duguje</h6>
                <h4 class="negative-saldo">@UkupnoDuguje.ToString("N2") RSD</h4>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card">
                <h6 class="text-muted">Saldo (Potražuje - Duguje)</h6>
                <h4 class="@GetSaldoClass(UkupnoSaldo)">@UkupnoSaldo.ToString("N2") RSD</h4>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-card">
                <h6 class="text-muted">Broj Stavki</h6>
                <h4 class="text-primary">@(podaci?.Count ?? 0)</h4>
            </div>
        </div>
    </div>

    <!-- Charts Section ostaje isto -->

    <!-- AŽURIRANA Results Table - uklonjen Tip i Saldo, dodana Cena kolona -->
    @if (podaci == null)
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    <strong>Učitavanje podataka</strong> - Molimo sačekajte...
                </div>
            </div>
        </div>
    }
    else if (!podaci.Any())
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Nema podataka</strong> - Nema pronađenih podataka za izabrane filtere.
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row financial-section">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-list-check me-2"></i>
                            Finansijski podaci - Detaljni prikaz
                            <span class="badge bg-primary ms-2">@podaci.Count stavki</span>
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover mb-0">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Datum</th>
                                        <th>Komitent</th>
                                        <!-- UKLONJENO: Tip kolona prema dokumentu -->
                                        <th>Dokument</th>
                                        <th>Artikal</th>
                                        <th class="text-end">Količina</th>
                                        <!-- DODATO: Cena kolona posle količine -->
                                        <th class="text-end">Cena</th>
                                        <th class="text-end">Potražuje</th>
                                        <th class="text-end">Duguje</th>
                                        <!-- UKLONJENO: Saldo kolona prema dokumentu -->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in podaci)
                                    {
                                        // ISPRAVKA: Cena se računa iz Duguje za prodaju, Potrazuje za kupovinu
                                        var cena = item.Kolicina != 0 ? 
                                            (item.Duguje > 0 ? item.Duguje / item.Kolicina : 
                                             item.Potrazuje > 0 ? item.Potrazuje / item.Kolicina : 0) : 0;
                                        <tr>
                                            <td>@item.Datum?.ToString("dd.MM.yyyy")</td>
                                            <td>@item.Komitent</td>
                                            <td>@item.Dokument</td>
                                            <td>@item.Artikal</td>
                                            <td class="text-end">@item.Kolicina.ToString("N2")</td>
                                            <!-- ISPRAVKA: Cena prema tipu transakcije -->
                                            <td class="text-end">@cena.ToString("N2")</td>
                                            <td class="text-end positive-saldo">@item.Potrazuje.ToString("N2")</td>
                                            <td class="text-end negative-saldo">@item.Duguje.ToString("N2")</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="table-secondary">
                                    <tr>
                                        <th colspan="5" class="text-end">UKUPNO:</th>
                                        <th class="text-end">-</th>
                                        <th class="text-end positive-saldo">@podaci.Sum(x => x.Potrazuje).ToString("N2")</th>
                                        <th class="text-end negative-saldo">@podaci.Sum(x => x.Duguje).ToString("N2")</th>
                                    </tr>
                                    <!-- DODATO: Saldo na dnu tabele -->
                                    <tr>
                                        <th colspan="6" class="text-end">SALDO (Potražuje - Duguje):</th>
                                        <th class="text-end @GetSaldoClass(podaci.Sum(x => x.Saldo))" colspan="2">@podaci.Sum(x => x.Saldo).ToString("N2") RSD</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                    <div class="card-footer bg-light">
                        <div class="row">
                            <div class="col-md-6">
                                Poslednje ažuriranje: @DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss")
                            </div>
                            <div class="col-md-6 text-end">
                                <!-- SALDO NA DNU -->
                                Ukupno saldo: <strong class="@GetSaldoClass(UkupnoSaldo)">@UkupnoSaldo.ToString("N2") RSD</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<FinansijeModel> podaci = new List<FinansijeModel>();
    private FilterRequest filterRequest = new FilterRequest();
    private decimal ukupnoSaldo = 0;
    private decimal ukupnoPotrazuje = 0;
    private decimal ukupnoDuguje = 0;
    private Dictionary<string, decimal>? topKupci;
    private Dictionary<string, decimal>? topDobavljaci;

    // DODATO: Liste za padajuće menije
    private List<Komitent>? komitentiLista;
    private List<Artikal>? artikliLista;

    private string OdDatumValue => filterRequest.OdDatum?.ToString("yyyy-MM-dd") ?? "";
    private string DoDatumValue => filterRequest.DoDatum?.ToString("yyyy-MM-dd") ?? "";

    private decimal UkupnoSaldo => ukupnoSaldo;
    private decimal UkupnoPotrazuje => ukupnoPotrazuje;
    private decimal UkupnoDuguje => ukupnoDuguje;
    private string saldoBadgeClass => UkupnoSaldo > 0 ? "bg-success" : UkupnoSaldo < 0 ? "bg-danger" : "bg-secondary";

    protected override async Task OnInitializedAsync()
    {
        var pocetakMeseca = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        filterRequest.OdDatum = pocetakMeseca;
        filterRequest.DoDatum = DateTime.Now;
        
        // DODATO: Učitavanje lista za padajuće menije
        await UcitajListeZaFiltriranje();
        await UcitajPodatke();
    }

    // DODATO: Metoda za učitavanje lista
    private async Task UcitajListeZaFiltriranje()
    {
        try
        {
            Console.WriteLine("Učitavam liste za filtriranje...");
            komitentiLista = await KomitentService.UcitajSveKomitente();
            Console.WriteLine($"Učitano {komitentiLista?.Count ?? 0} komitenata");
            
            artikliLista = await ArtikalService.UcitajSveArtikle();
            Console.WriteLine($"Učitano {artikliLista?.Count ?? 0} artikala");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Greška pri učitavanju lista: {ex.Message}");
            komitentiLista = new List<Komitent>();
            artikliLista = new List<Artikal>();
        }
    }

    // NOVO: Reaktivni filter za tip komitenta
    private async Task OnKomitentTipChanged(ChangeEventArgs e)
    {
        filterRequest.KomitentTip = e.Value?.ToString();
        // Resetuj komitent ID jer se menja tip
        filterRequest.KomitentId = null;
        
        // Ažuriraj listu komitenata na osnovu novog tipa
        if (string.IsNullOrWhiteSpace(filterRequest.KomitentTip))
        {
            komitentiLista = await KomitentService.UcitajSveKomitente();
        }
        else
        {
            komitentiLista = await KomitentService.UcitajKomitentePoPretragaITipu("", filterRequest.KomitentTip);
        }
        StateHasChanged();
    }

    // NOVO: Reaktivni filter za tip artikla
    private async Task OnArtikalTipChanged(ChangeEventArgs e)
    {
        filterRequest.Tip = e.Value?.ToString();
        // Resetuj artikal ID jer se menja tip
        filterRequest.ArtikalId = null;
        
        // Ažuriraj listu artikala na osnovu novog tipa
        if (string.IsNullOrWhiteSpace(filterRequest.Tip))
        {
            artikliLista = await ArtikalService.UcitajSveArtikle();
        }
        else if (int.TryParse(filterRequest.Tip, out int tipInt))
        {
            artikliLista = await ArtikalService.UcitajArtiklePoPretragaITipu("", tipInt);
        }
        else
        {
            artikliLista = await ArtikalService.UcitajSveArtikle();
        }
        StateHasChanged();
    }

    private void OnOdDatumChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            filterRequest.OdDatum = date;
        }
    }

    private void OnDoDatumChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            filterRequest.DoDatum = date;
        }
    }

    private async Task UcitajPodatke()
    {
        try
        {
            // Učitaj osnovne podatke
            podaci = await FinansijeService.UcitajFinansijskiIzvestaj(filterRequest);
            ukupnoSaldo = await FinansijeService.UcitajUkupnoSaldo(filterRequest);

            // Izračunaj ukupne vrednosti iz učitanih podataka
            ukupnoPotrazuje = podaci.Sum(x => x.Potrazuje);
            ukupnoDuguje = podaci.Sum(x => x.Duguje);

            // Učitaj top kupce i dobavljače
            topKupci = await FinansijeService.UcitajTopKupce(filterRequest);
            topDobavljaci = await FinansijeService.UcitajTopDobavljace(filterRequest);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Greška pri učitavanju podataka: {ex.Message}");
            podaci = new List<FinansijeModel>();
            ukupnoSaldo = 0;
            ukupnoPotrazuje = 0;
            ukupnoDuguje = 0;
        }
    }

    private string GetSaldoClass(decimal saldo)
    {
        return saldo > 0 ? "positive-saldo" : saldo < 0 ? "negative-saldo" : "neutral-saldo";
    }

    private async Task ResetujFiltere()
    {
        var pocetakMeseca = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        filterRequest = new FilterRequest
        {
            OdDatum = pocetakMeseca,
            DoDatum = DateTime.Now
        };
        
        // Ponovo učitaj osnovne liste
        await UcitajListeZaFiltriranje();
        await UcitajPodatke();
    }

    // Export metode ostaju iste
    private async Task ExportToExcel()
    {
        try
        {
            var excelData = ExportService.ExportToExcel(podaci);
            var fileName = $"finansije_export_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";
            await DownloadFile(excelData, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Greška pri exportu u Excel: {ex.Message}");
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var pdfData = ExportService.ExportToPdf(podaci);
            var fileName = $"finansije_export_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            await DownloadFile(pdfData, fileName, "application/pdf");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Greška pri exportu u PDF: {ex.Message}");
        }
    }

    private async Task DownloadFile(byte[] data, string fileName, string mimeType)
    {
        await JSRuntime.InvokeVoidAsync("downloadFile", Convert.ToBase64String(data), fileName, mimeType);
    }
}