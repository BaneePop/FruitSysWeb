@page "/lager"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using FruitSysWeb.Models
@using FruitSysWeb.Services
@using FruitSysWeb.Services.Models.Requests
@using FruitSysWeb.Services.Interfaces
@inject IMagacinLagerService LagerService
@inject IExportService ExportService
@inject IJSRuntime JSRuntime

<style>
    .low-stock { background-color: #fff5f5; border-left: 4px solid #dc3545; }
    .medium-stock { background-color: #fff8e1; border-left: 4px solid #ffc107; }
    .high-stock { background-color: #f0f9ff; border-left: 4px solid #198754; }
    
    .stock-alert {
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    
    .artikal-tip-badge {
        font-size: 0.7rem;
        padding: 0.25rem 0.5rem;
    }
    
    .nav-tabs-vertical {
        border-right: 1px solid #dee2e6;
        border-bottom: none;
    }
    
    .nav-tabs-vertical .nav-link {
        border: 1px solid transparent;
        border-right: none;
        margin-bottom: 2px;
    }
    
    .nav-tabs-vertical .nav-link.active {
        border-color: #dee2e6 #fff #dee2e6 #dee2e6;
    }
</style>

<div class="container-fluid">
    <!-- Header -->
    <div class="bg-info text-white py-3 mb-4">
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h1 class="h3 mb-0">
                        <i class="bi bi-boxes me-2"></i>
                        Lager Stanje
                    </h1>
                </div>
                <div class="col-md-6 text-end">
                    <span class="badge bg-light text-dark fs-6">
                        <i class="bi bi-box me-1"></i>@(lagerStanje?.Count ?? 0) artikala
                    </span>
                    <span class="badge bg-warning text-dark ms-2 fs-6">
                        Ukupno: @(lagerStanje?.Sum(x => x.Kolicina).ToString("N2") ?? "0.00") kg
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- TABS za različite preglede -->
    <div class="row mb-4">
        <div class="col-12">
            <ul class="nav nav-tabs" id="lagerTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="magacin-tab" data-bs-toggle="tab" data-bs-target="#magacin" type="button" role="tab">
                        <i class="bi bi-warehouse me-2"></i>Magacin Lager
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="proizvodnja-tab" data-bs-toggle="tab" data-bs-target="#proizvodnja" type="button" role="tab" @onclick="UcitajLagerProizvodnje">
                        <i class="bi bi-gear me-2"></i>Lager Proizvodnje
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <div class="tab-content" id="lagerTabContent">
        <!-- MAGACIN LAGER TAB -->
        <div class="tab-pane fade show active" id="magacin" role="tabpanel">
            <!-- AŽURIRANI Filter Section - uklonjeni rok važenja i min/max količina -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-info">
                        <div class="card-header bg-info text-white">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-funnel me-2"></i>Filteri pretrage
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3 mb-3">
                                    <label class="form-label fw-bold">Tip artikla:</label>
                                    <select class="form-select" @bind="filterRequest.Tip">
                                        <option value="">Svi tipovi</option>
                                        <option value="1">Sirovina</option>
                                        <option value="2">Ambalaza</option>
                                        <option value="3">Potrošni materijal</option>
                                        <option value="4">Gotova roba</option>
                                        <option value="5">Oprema</option>
                                        <option value="7">Klase</option>
                                    </select>
                                </div>

                                <!-- DODATO: Pakovanje kao padajući meni prema dokumentu -->
                                <div class="col-md-3 mb-3">
                                    <label class="form-label fw-bold">Pakovanje:</label>
                                    <select class="form-select" @bind="filterRequest.Pakovanje">
                                        <option value="">Sva pakovanja</option>
                                        @if (pakovanjeLista != null)
                                        {
                                            @foreach (var pakovanje in pakovanjeLista)
                                            {
                                                <option value="@pakovanje">@pakovanje</option>
                                            }
                                        }
                                    </select>
                                </div>

                                <div class="col-md-3 mb-3">
                                    <label class="form-label fw-bold">Brzi filteri:</label>
                                    <div class="btn-group-vertical d-grid gap-1">
                                        <button class="btn @(filterRequest.SamoGotoveRobe == true ? "btn-success" : "btn-outline-success") btn-sm" 
                                                @onclick="() => ToggleFilter(nameof(filterRequest.SamoGotoveRobe))">
                                            <i class="bi bi-box-seam me-1"></i>Gotove robe
                                        </button>
                                        <button class="btn @(filterRequest.SamoSirovine == true ? "btn-primary" : "btn-outline-primary") btn-sm" 
                                                @onclick="() => ToggleFilter(nameof(filterRequest.SamoSirovine))">
                                            <i class="bi bi-gear me-1"></i>Sirovine
                                        </button>
                                        <button class="btn @(filterRequest.SamoAmbalaže == true ? "btn-warning" : "btn-outline-warning") btn-sm" 
                                                @onclick="() => ToggleFilter(nameof(filterRequest.SamoAmbalaže))">
                                            <i class="bi bi-box me-1"></i>Ambalaze
                                        </button>
                                    </div>
                                </div>

                                <div class="col-md-3 mb-3 d-flex align-items-end">
                                    <div class="d-flex flex-column gap-2 w-100">
                                        <button class="btn btn-info" @onclick="UcitajPodatke">
                                            <i class="bi bi-search me-2"></i>Filtriraj
                                        </button>
                                        <button class="btn btn-outline-secondary" @onclick="ResetujFiltere">
                                            <i class="bi bi-arrow-clockwise me-1"></i>Reset
                                        </button>
                                        <div class="btn-group">
                                            <button class="btn btn-success btn-sm" @onclick="ExportToExcel" disabled="@(lagerStanje?.Count == 0)">
                                                <i class="bi bi-file-earmark-excel me-1"></i>Excel
                                            </button>
                                            <button class="btn btn-danger btn-sm" @onclick="ExportToPdf" disabled="@(lagerStanje?.Count == 0)">
                                                <i class="bi bi-file-earmark-pdf me-1"></i>PDF
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <!-- UKLONJENI: Rok važenja filteri prema dokumentu -->
                                <!-- UKLONJENI: Min/Max količina filteri prema dokumentu -->
                            </div>

                            @if (filterRequest.ImaAktivneFiltre())
                            {
                                <div class="row mt-2">
                                    <div class="col-12">
                                        <div class="alert alert-info small">
                                            <strong>Aktivni filteri:</strong> @filterRequest.GetAktivneFiltereOpis()
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body text-center">
                            <h5>Ukupno artikala</h5>
                            <h3>@(lagerStanje?.Count ?? 0)</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body text-center">
                            <h5>Ukupna količina</h5>
                            <h3>@(lagerStanje?.Sum(x => x.Kolicina).ToString("N2") ?? "0.00")</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-dark">
                        <div class="card-body text-center">
                            <h5>Ispod minimuma</h5>
                            <h3>@artikliIspodMinimuma</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-white">
                        <div class="card-body text-center">
                            <h5>Dostupno</h5>
                            <h3>@(lagerStanje?.Count(x => x.Kolicina >= 10) ?? 0)</h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Results Section -->
            @if (lagerStanje == null)
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    Učitavanje podataka...
                </div>
            }
            else if (!lagerStanje.Any())
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Nema podataka za prikaz sa trenutnim filterima.
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header bg-light">
                                <h5 class="card-title mb-0">
                                    <i class="bi bi-list-check me-2"></i>
                                    Magacin Lager Stanje
                                    <span class="badge bg-info ms-2">@lagerStanje.Count artikala</span>
                                </h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover mb-0">
                                        <thead class="table-dark">
                                            <tr>
                                                <!-- UKLONJENO: Artikal ID kolona prema dokumentu -->
                                                <th>Tip</th>
                                                <th>Artikal</th>
                                                <th class="text-end">Količina</th>
                                                <th>Pakovanje</th>
                                                <th>JM</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in lagerStanje)
                                            {
                                                var stockClass = GetStockClass(item.Kolicina, 10);
                                                var stockStatus = GetStockStatus(item.Kolicina, 10);
                                                
                                                <tr class="@stockClass">
                                                    <td>
                                                        @{
                                                            var tipInt = GetArtikalTipAsInt(item.Tip);
                                                            var tipBadgeClass = GetBadgeClass(tipInt);
                                                            var tipNaziv = GetDisplayName(tipInt);
                                                        }
                                                        <span class="badge @tipBadgeClass artikal-tip-badge">@tipNaziv</span>
                                                    </td>
                                                    <td>
                                                        <strong>@item.Artikal</strong>
                                                    </td>
                                                    <td class="text-end">
                                                        <span class="fw-bold">@item.Kolicina.ToString("N2")</span>
                                                    </td>
                                                    <td>@item.Pakovanje</td>
                                                    <td>@item.JM</td>
                                                    <td>@stockStatus</td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot class="table-secondary">
                                            <tr>
                                                <th colspan="2" class="text-end">UKUPNO:</th>
                                                <th class="text-end text-info">@lagerStanje.Sum(x => x.Kolicina).ToString("N2")</th>
                                                <th colspan="3"></th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- LAGER PROIZVODNJE TAB - DODATO prema dokumentu -->
        <div class="tab-pane fade" id="proizvodnja" role="tabpanel">
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-gear me-2"></i>
                                Lager Proizvodnje (vwRadniNalogLager)
                                <span class="badge bg-info ms-2">@(lagerProizvodnje?.Count ?? 0) naloga</span>
                            </h5>
                        </div>
                        <div class="card-body p-0">
                            @if (lagerProizvodnje == null)
                            {
                                <div class="alert alert-info m-3">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Učitavanje podataka...
                                </div>
                            }
                            else if (!lagerProizvodnje.Any())
                            {
                                <div class="alert alert-warning m-3">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    Nema podataka o lageru proizvodnje.
                                </div>
                            }
                            else
                            {
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover mb-0">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Radni Nalog</th>
                                                <th>Artikal</th>
                                                <th>Pakovanje</th>
                                                <th class="text-end">Količina</th>
                                                <th class="text-end">Potrebna Količina</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in lagerProizvodnje)
                                            {
                                                <tr>
                                                    <td>
                                                        <span class="badge bg-primary">@item.BrojNaloga</span>
                                                    </td>
                                                    <td>@item.Artikal</td>
                                                    <td>@item.Pakovanje</td>
                                                    <td class="text-end fw-bold">@item.Kolicina.ToString("N2")</td>
                                                    <td class="text-end text-muted">@item.PotrebnaKolicina.ToString("N2")</td>
                                                    <td>
                                                        @{
                                                            var statusBadge = item.DokumentStatus == 2 ? "bg-success" : "bg-secondary";
                                                            var statusText = item.DokumentStatus == 2 ? "Otvoren" : item.DokumentStatus == 3 ? "Zaključen" : "Nepoznato";
                                                        }
                                                        <span class="badge @statusBadge">@statusText</span>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot class="table-secondary">
                                            <tr>
                                                <th colspan="3" class="text-end">UKUPNO:</th>
                                                <th class="text-end text-info">@lagerProizvodnje.Sum(x => x.Kolicina).ToString("N2")</th>
                                                <th class="text-end text-muted">@lagerProizvodnje.Sum(x => x.PotrebnaKolicina).ToString("N2")</th>
                                                <th></th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<MagacinLagerModel>? lagerStanje;
    private List<RadniNalogLagerModel>? lagerProizvodnje; // DODATO prema dokumentu
    private List<string>? pakovanjeLista; // DODATO za padajući meni
    private FilterRequest filterRequest = new FilterRequest();
    private decimal ukupnaVrednostLager = 0;
    private int artikliIspodMinimuma = 0;

    protected override async Task OnInitializedAsync()
    {
        await UcitajListeZaFiltriranje();
        await UcitajPodatke();
    }

    // DODATO: Učitavanje lista za padajuće menije
    private async Task UcitajListeZaFiltriranje()
    {
        try
        {
            pakovanjeLista = await LagerService.UcitajListuPakovanja();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Greška pri učitavanju lista: {ex.Message}");
            pakovanjeLista = new List<string>();
        }
    }

    private async Task UcitajPodatke()
    {
        try
        {
            lagerStanje = await LagerService.UcitajLagerStanjeSaFilterima(filterRequest);
            ukupnaVrednostLager = await LagerService.UcitajUkupnuVrednostLager();
            
            if (lagerStanje != null)
            {
                artikliIspodMinimuma = lagerStanje.Count(x => x.Kolicina < 10);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Greška pri učitavanju lager podataka: {ex.Message}");
            lagerStanje = new List<MagacinLagerModel>();
        }
    }

    // DODATO: Učitavanje lager proizvodnje
    private async Task UcitajLagerProizvodnje()
    {
        try
        {
            lagerProizvodnje = await LagerService.UcitajLagerProizvodnje();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Greška pri učitavanju lager proizvodnje: {ex.Message}");
            lagerProizvodnje = new List<RadniNalogLagerModel>();
        }
    }

    private void ToggleFilter(string filterName)
    {
        // Reset all quick filters first
        filterRequest.SamoGotoveRobe = null;
        filterRequest.SamoSirovine = null;
        filterRequest.SamoAmbalaže = null;
        filterRequest.Tip = "";

        // Set the selected filter
        switch (filterName)
        {
            case nameof(filterRequest.SamoGotoveRobe):
                filterRequest.SamoGotoveRobe = true;
                filterRequest.Tip = "4";
                break;
            case nameof(filterRequest.SamoSirovine):
                filterRequest.SamoSirovine = true;
                filterRequest.Tip = "1";
                break;
            case nameof(filterRequest.SamoAmbalaže):
                filterRequest.SamoAmbalaže = true;
                filterRequest.Tip = "2";
                break;
        }
    }

    private async Task ResetujFiltere()
    {
        filterRequest = new FilterRequest();
        await UcitajPodatke();
    }

    private string GetStockClass(decimal kolicina, decimal minimum)
    {
        if (kolicina < minimum) return "low-stock";
        if (kolicina < minimum * 2) return "medium-stock";
        return "high-stock";
    }

    private string GetStockStatus(decimal kolicina, decimal minimum)
    {
        if (kolicina < minimum) 
            return $"⚠️ Ispod minimuma";
        if (kolicina < minimum * 2) 
            return "⚡ Ograničeno";
        return "✅ Dostupno";
    }

    private int GetArtikalTipAsInt(string? tip)
    {
        if (int.TryParse(tip, out int tipInt))
        {
            return tipInt;
        }
        return 0;
    }

    private string GetBadgeClass(int tip)
    {
        return tip switch
        {
            1 => "bg-primary",
            2 => "bg-warning text-dark",
            3 => "bg-secondary",
            4 => "bg-success",
            5 => "bg-danger",
            7 => "bg-info",
            _ => "bg-light text-dark"
        };
    }

    private string GetDisplayName(int tip)
    {
        return tip switch
        {
            1 => "Sirovina",
            2 => "Ambalaza",
            3 => "Potrošni mat.",
            4 => "Gotova roba",
            5 => "Oprema",
            7 => "Klase",
            _ => $"Tip {tip}"
        };
    }

    // Export metode
    private async Task ExportToExcel()
    {
        try
        {
            if (lagerStanje != null && lagerStanje.Any())
            {
                var excelData = ExportService.ExportToExcel(lagerStanje);
                var fileName = $"lager_stanje_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";
                await DownloadFile(excelData, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Greška pri exportu u Excel: {ex.Message}");
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            if (lagerStanje != null && lagerStanje.Any())
            {
                var pdfData = ExportService.ExportToPdf(lagerStanje);
                var fileName = $"lager_stanje_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
                await DownloadFile(pdfData, fileName, "application/pdf");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Greška pri exportu u PDF: {ex.Message}");
        }
    }

    private async Task DownloadFile(byte[] data, string fileName, string mimeType)
    {
        await JSRuntime.InvokeVoidAsync("downloadFile", Convert.ToBase64String(data), fileName, mimeType);
    }
}