@* @using FruitSysWeb.Utils.Charts
@using FruitSysWeb.Services.Interfaces
@using FruitSysWeb.Services.Models.Requests
@inject IProizvodnjaService ProizvodnjaService
@inject IMagacinLagerService LagerService

<div class="chart-showcase">
    <div class="row">
        <div class="col-12">
            <h3>Chart Showcase - Test razliƒçitih tipova grafika</h3>
            <p class="text-muted">Ova komponenta demonstrira sve dostupne tipove grafika u sistemu</p>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Sample Bar Chart -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Sample Bar Chart</h5>
                    <button class="btn btn-sm btn-outline-primary" @onclick="GenerateSampleBarData">
                        <i class="bi bi-arrow-clockwise"></i> Generate Sample Data
                    </button>
                </div>
                <div class="card-body">
                    @if (sampleBarConfig != null)
                    {
                        <BarChart Config="@sampleBarConfig" Height="250" />
                        <small class="text-muted">Total: @sampleBarConfig.GetTotalValue().ToString("N1")</small>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-bar-chart display-4 text-muted"></i>
                            <p>Click button to generate sample data</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sample Pie Chart -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Sample Pie Chart</h5>
                    <button class="btn btn-sm btn-outline-success" @onclick="GenerateSamplePieData">
                        <i class="bi bi-arrow-clockwise"></i> Generate Sample Data
                    </button>
                </div>
                <div class="card-body">
                    @if (samplePieConfig != null)
                    {
                        <PieChart Config="@samplePieConfig" Height="250" />
                        <small class="text-muted">Total: @samplePieConfig.GetTotalValue().ToString("N1")</small>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-pie-chart display-4 text-muted"></i>
                            <p>Click button to generate sample data</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Live Data Chart -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Live Production Data</h5>
                    <div>
                        <button class="btn btn-sm btn-outline-info me-2" @onclick="LoadLiveData" disabled="@loadingLive">
                            @if (loadingLive)
                            {
                                <i class="bi bi-hourglass-split"></i>
                            }
                            else
                            {
                                <i class="bi bi-cloud-download"></i>
                            }
                            Load Live Data
                        </button>
                        <button class="btn btn-sm btn-outline-warning" @onclick="ToggleAutoRefresh">
                            <i class="bi bi-@(autoRefreshEnabled ? "pause" : "play")-circle"></i>
                            @(autoRefreshEnabled ? "Stop" : "Start") Auto Refresh
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (liveDataConfig != null)
                    {
                        <BarChart Config="@liveDataConfig" Height="300" />
                        <div class="mt-2">
                            <small class="text-muted">
                                Last updated: @lastUpdateTime.ToString("HH:mm:ss") | 
                                Total: @liveDataConfig.GetTotalValue().ToString("N1") kg |
                                @(autoRefreshEnabled ? "Auto refresh: ON" : "Auto refresh: OFF")
                            </small>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            @if (loadingLive)
                            {
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Loading production data...</p>
                            }
                            else
                            {
                                <i class="bi bi-database display-4 text-muted"></i>
                                <p>Click "Load Live Data" to fetch real production data</p>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Chart Statistics -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Chart Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6>Sample Bar Chart</h6>
                        <div class="text-muted">
                            Items: @(sampleBarConfig?.Data.Labels.Count ?? 0)<br>
                            Has Data: @(sampleBarConfig?.HasData() == true ? "Yes" : "No")<br>
                            Total Value: @(sampleBarConfig?.GetTotalValue().ToString("N1") ?? "0")
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <h6>Sample Pie Chart</h6>
                        <div class="text-muted">
                            Items: @(samplePieConfig?.Data.Labels.Count ?? 0)<br>
                            Has Data: @(samplePieConfig?.HasData() == true ? "Yes" : "No")<br>
                            Total Value: @(samplePieConfig?.GetTotalValue().ToString("N1") ?? "0")
                        </div>
                    </div>

                    <div class="mb-3">
                        <h6>Live Data Chart</h6>
                        <div class="text-muted">
                            Items: @(liveDataConfig?.Data.Labels.Count ?? 0)<br>
                            Has Data: @(liveDataConfig?.HasData() == true ? "Yes" : "No")<br>
                            Status: @(loadingLive ? "Loading" : "Ready")<br>
                            Last Update: @lastUpdateTime.ToString("HH:mm:ss")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private BarConfig? sampleBarConfig;
    private PieConfig? samplePieConfig;
    private BarConfig? liveDataConfig;
    
    private bool loadingLive = false;
    private bool autoRefreshEnabled = false;
    private DateTime lastUpdateTime = DateTime.Now;
    private Timer? autoRefreshTimer;

    private void GenerateSampleBarData()
    {
        var sampleData = new Dictionary<string, decimal>
        {
            { "January", 150.5m },
            { "February", 220.3m },
            { "March", 180.7m },
            { "April", 310.2m },
            { "May", 275.8m }
        };

        sampleBarConfig = ChartHelper.CreateCustomBarChart(
            sampleData,
            "Sample Values",
            "rgba(54, 162, 235, 0.8)",
            5
        );

        StateHasChanged();
    }

    private void GenerateSamplePieData()
    {
        var sampleData = new Dictionary<string, decimal>
        {
            { "Red", 30 },
            { "Blue", 25 },
            { "Green", 20 },
            { "Yellow", 15 },
            { "Purple", 10 }
        };

        samplePieConfig = ChartHelper.CreateCustomPieChart(
            sampleData,
            "Sample Distribution",
            5
        );

        StateHasChanged();
    }

    private async Task LoadLiveData()
    {
        if (loadingLive) return;

        loadingLive = true;
        StateHasChanged();

        try
        {
            var filter = new FilterRequest
            {
                OdDatum = DateTime.Now.AddDays(-30),
                DoDatum = DateTime.Now
            };

            var liveData = await ProizvodnjaService.UcitajProizvodnjuPoArtiklima(filter);
            
            if (liveData.Any())
            {
                liveDataConfig = ChartHelper.CreateCustomBarChart(
                    liveData,
                    "Production (kg)",
                    "rgba(75, 192, 192, 0.8)",
                    10
                );
            }
            else
            {
                // Generate some demo data if no real data
                var demoData = new Dictionary<string, decimal>
                {
                    { "Product A", Random.Shared.Next(100, 500) },
                    { "Product B", Random.Shared.Next(100, 500) },
                    { "Product C", Random.Shared.Next(100, 500) },
                    { "Product D", Random.Shared.Next(100, 500) }
                };

                liveDataConfig = ChartHelper.CreateCustomBarChart(
                    demoData,
                    "Demo Production (kg)",
                    "rgba(255, 159, 64, 0.8)",
                    4
                );
            }

            lastUpdateTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading live data: {ex.Message}");
            // Fallback to demo data
            var fallbackData = new Dictionary<string, decimal>
            {
                { "Fallback A", 100 },
                { "Fallback B", 200 }
            };

            liveDataConfig = ChartHelper.CreateCustomBarChart(
                fallbackData,
                "Fallback Data (kg)",
                "rgba(255, 99, 132, 0.8)",
                2
            );
        }
        finally
        {
            loadingLive = false;
            StateHasChanged();
        }
    }

    private void ToggleAutoRefresh()
    {
        autoRefreshEnabled = !autoRefreshEnabled;

        if (autoRefreshEnabled)
        {
            autoRefreshTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await LoadLiveData();
                });
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
        }
        else
        {
            autoRefreshTimer?.Dispose();
            autoRefreshTimer = null;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        autoRefreshTimer?.Dispose();
    }
}

<style>
    .chart-showcase .card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border: none;
        margin-bottom: 1rem;
    }

    .chart-showcase .card-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-bottom: none;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chart-showcase .card-header h5 {
        margin: 0;
        font-weight: 600;
    }
</style>
 *@