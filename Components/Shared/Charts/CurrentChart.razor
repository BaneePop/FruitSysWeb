@using FruitSysWeb.Services.Interfaces
@using Microsoft.Extensions.Logging
@using FruitSysWeb.Components.Shared.Charts
@inject IDashboardService DashboardService
@inject ILogger<CurrentChart> Logger

@if (isLoading)
{
    <div class="chart-loading d-flex justify-content-center align-items-center" style="height: 300px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading chart data...</span>
        </div>
    </div>
}   
else if (chartData == null || !chartData.Any())
{
    <div class="chart-error alert alert-warning" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        No chart data available for @Title
    </div>
}
else
{
    <LineChart Data="@stringDecimalData" 
               Title="@Title" 
               Width="600" 
               Height="300" 
               Color="rgba(75, 192, 192, 0.8)"
               Fill="false" />
}

@code {
    [Parameter]
    public string Title { get; set; } = "Current Chart";
    
    [Parameter]
    public Func<IDashboardService, Task<Dictionary<DateTime, double>>>? DataLoader { get; set; }
    
    private Dictionary<DateTime, double>? chartData;
    private Dictionary<string, decimal>? stringDecimalData;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (DataLoader == null)
        {
            Logger.LogError("DataLoader parameter is not set for chart: {Title}", Title);
            isLoading = false;
            return;
        }

        await LoadChartData();
    }

    private async Task LoadChartData()
    {
        isLoading = true;
        
        try
        {
            if (DataLoader != null)
            {
                chartData = await DataLoader(DashboardService);
                
                if (chartData != null && chartData.Any())
                {
                    // Convert DateTime, double dictionary to string, decimal for LineChart
                    stringDecimalData = chartData.ToDictionary(
                        x => x.Key.ToString("MMM yyyy"), 
                        x => (decimal)x.Value
                    );
                }
                else
                {
                    Logger.LogWarning("No chart data available for {Title}", Title);
                    stringDecimalData = null;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading chart data for {Title}", Title);
            stringDecimalData = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    public async Task RefreshData()
    {
        await LoadChartData();
        StateHasChanged();
    }
}

<style>
    .chart-loading {
        min-height: 300px;
    }
    
    .chart-error {
        min-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
    }
</style>
