@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@using FruitSysWeb.Utils
@using FruitSysWeb.Components
@using FruitSysWeb.Models
@using FruitSysWeb.Services





<div class="simple-chart-container">
    <canvas id="@CanvasId" width="@Width" height="@Height"></canvas>
</div>

@code {
    [Parameter] public string CanvasId { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public int Width { get; set; } = 400;
    [Parameter] public int Height { get; set; } = 200;
    [Parameter] public Dictionary<string, decimal>? Data { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Color { get; set; } = "rgba(54, 162, 235, 0.8)";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Data?.Any() == true)
        {
            await CreateChart();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Data?.Any() == true)
        {
            await CreateChart();
        }
    }

    private async Task CreateChart()
    {
        try
        {
            var labels = Data?.Keys.ToArray() ?? Array.Empty<string>();
            var values = Data?.Values.ToArray() ?? Array.Empty<decimal>();

            var config = new
            {
                type = "bar",
                data = new
                {
                    labels = labels,
                    datasets = new[]
                    {
                        new
                        {
                            label = Title,
                            data = values,
                            backgroundColor = Color,
                            borderColor = Color.Replace("0.8", "1"),
                            borderWidth = 1
                        }
                    }
                },
                options = new
                {
                    responsive = true,
                    maintainAspectRatio = false,
                    plugins = new
                    {
                        legend = new
                        {
                            display = false
                        }
                    },
                    scales = new
                    {
                        y = new
                        {
                            beginAtZero = true
                        }
                    }
                }
            };

            await JSRuntime.InvokeVoidAsync("ChartJsInterop.updateChart", CanvasId, config);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating chart: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("ChartJsInterop.destroyChart", CanvasId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing chart: {ex.Message}");
        }
    }
}

<style>
    .simple-chart-container {
        position: relative;
        width: 100%;
        height: 100%;
    }
</style>
