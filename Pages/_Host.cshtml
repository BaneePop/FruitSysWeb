@page "/"
@namespace FruitSysWeb.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    
    <!-- Bootstrap CSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Bootstrap Icons CDN -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    
    <link href="css/site.css" rel="stylesheet" />
    <title>FruitSysWeb</title>
</head>
<body>
    <!-- KLJUÄŒNA IZMENA: Server umesto ServerPrerendered -->
    <component type="typeof(App)" render-mode="Server" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>

    <!-- Chart.js CDN - Najnovija verzija -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.min.js"></script>
    
    <!-- Bootstrap JavaScript CDN -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Blazor Script -->
    <script src="_framework/blazor.server.js"></script>

    <!-- Chart.js Integration for Blazor -->
    <script>
        window.ChartJsInterop = {
            chartInstances: {},
            
            updateChart: function (canvasId, config) {
                try {
                    // UniÅ¡ti postojeÄ‡i chart ako postoji
                    if (this.chartInstances[canvasId]) {
                        this.chartInstances[canvasId].destroy();
                        delete this.chartInstances[canvasId];
                    }

                    // PronaÄ‘i canvas element
                    const canvas = document.getElementById(canvasId);
                    if (!canvas) {
                        console.error('Canvas element not found:', canvasId);
                        return;
                    }

                    // Kreiraj novi chart
                    const ctx = canvas.getContext('2d');
                    this.chartInstances[canvasId] = new Chart(ctx, config);
                    
                    console.log('Chart updated successfully:', canvasId);
                } catch (error) {
                    console.error('Error updating chart:', error);
                }
            },
            
            destroyChart: function (canvasId) {
                try {
                    if (this.chartInstances[canvasId]) {
                        this.chartInstances[canvasId].destroy();
                        delete this.chartInstances[canvasId];
                        console.log('Chart destroyed successfully:', canvasId);
                    }
                } catch (error) {
                    console.error('Error destroying chart:', error);
                }
            },
            
            // Dodatne helper metode
            resizeChart: function (canvasId) {
                try {
                    if (this.chartInstances[canvasId]) {
                        this.chartInstances[canvasId].resize();
                    }
                } catch (error) {
                    console.error('Error resizing chart:', error);
                }
            },
            
            updateChartData: function (canvasId, newData) {
                try {
                    if (this.chartInstances[canvasId]) {
                        this.chartInstances[canvasId].data = newData;
                        this.chartInstances[canvasId].update();
                    }
                } catch (error) {
                    console.error('Error updating chart data:', error);
                }
            }
        };

        // Cleanup na page unload
        window.addEventListener('beforeunload', function() {
            Object.keys(window.ChartJsInterop.chartInstances).forEach(canvasId => {
                window.ChartJsInterop.destroyChart(canvasId);
            });
        });
        
        // Resize handler
        window.addEventListener('resize', function() {
            Object.keys(window.ChartJsInterop.chartInstances).forEach(canvasId => {
                window.ChartJsInterop.resizeChart(canvasId);
            });
        });
    </script>

    <!-- Download File Script -->
    <script>
        function downloadFile(base64Data, fileName, mimeType) {
            try {
                const byteCharacters = atob(base64Data);
                const byteNumbers = new Array(byteCharacters.length);
                
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: mimeType });
                
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                
                link.href = url;
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                
                setTimeout(() => {
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                }, 100);
                
            } catch (error) {
                console.error('Download error:', error);
                alert('DoÅ¡lo je do greÅ¡ke pri preuzimanju fajla: ' + error.message);
            }
        }
    </script>
</body>
</html>
